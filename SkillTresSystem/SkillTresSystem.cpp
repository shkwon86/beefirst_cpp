// SkillTresSystem.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
//

#include <iostream>

/**
 * ActionTool
 * - 어떻게 데이터를 설정하고 저장할 것 인가?
 * - 기존 데이터를 어떻게 파싱해서 가져올 것 인가?
 * 
 *  Idea1.
 *  - 스킬리스트에서 스킬콤보뷰 옵션을 추가
 *  - 시작스킬은 루트가 되고, 시작 스킬 이 후 콤보스킬로 등록된 스킬들은 자식트리가 된다.
 *  - 액션데이터에서 Combo list를 스킬아이디만 저장한다.
 *  - 
 * 
 * Redirect System
 * - 오버킬의 Skill과 Redirect 코드를 어떻게 들고 올 것인가?
 * 
 * Simulator
 * - 데이터를 어디서 어떻게 로드 할 것인가?
 * - 어떤 클래스가 들고있을 것 인가?
 * - 유저의 인풋을 받았을 때 Redirect와 어떻게 연동할 것 인가?
 * - 유저에게 어떤 정보를 보내 줄 것 인가?
 * 
 * 클라이언트 Combo
 * 1. Q1~20 인풋 입력
 * 2. 사용조건 체크 (Redirect)
 *  - 시뮬레이터 관련 코드는 사용할 수 없다.
 *  - 클라이언트는 단순히 인풋정보만 시뮬레이터에게 전송한다.
 * 3. 시뮬레이터에게 스킬사용 결과를 받는다.
 * 
 * 
 * Simulator Combo
 * 
 * 
 * Todo
 * [시뮬레이터]
 * - 유저키맵핑 정보를 전송받아야 한다.
 * - Redirect System
 *   스킬 사용 시 성공유무 결과와 함께 해당스킬의 쿨타입 업데이트 요청
 *   성공했다면 다음 콤보스킬 정보도 전달
 * [클라이언트]
 * - 시뮬레이터에 키맵핑 정보 전달.
 * - 스킬의 다음 콤보스킬이 추가되면 트리뷰에서 자식 트리노드로 해당 콤보스킬이 이동한다.
 * [Tool]
 * - 스킬 콤보 정보 입력 및 저장 (스킬의 시작노드에 다음 콤보 스킬 추가)
 * - 콤보트리뷰 추가
 *   스킬노드를 드래그&드랍으로 다른 트리의 자식으로 추가할 수 있다.
 *   추가하면 자동으로 루트스킬은 시작스킬이 되고, 콤보스킬 정보가 등록된다.
 *   등록된 정보는 루트스킬노드를 선택했을 때 시작노드 조건에 추가된다.
 *   시작노드에서 콤보스킬 설정 시 자동으로 트리뷰의 자식이 업데이트 (트리뷰<->노드설정 동기화)
 * - 에디터 기능
 *   트리 드래그&드랍
 *   트리뷰 모드 변경
 *   외부에서 트리뷰 업데이트 요청
 * - 콤보에 대한 자세한 데이터는 데이터테이블에 정의
 *   데이터테이블에 필요한 구조체나 enum들은 스키마에 정의
 * - 데이터테이블을 어떻게 뽑아서 시뮬레이터에서 로드할 것 인가?
 *   csv로 저장
 *   
 * 
 * 
 */

int main()
{
    std::cout << "Hello World!\n";
}
